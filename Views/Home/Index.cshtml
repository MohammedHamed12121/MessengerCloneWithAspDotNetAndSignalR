@using RealTimeChatApp.ViewModels
@model IndexViewModel
@{
    ViewData["Title"] = "Home Page";
}
<style>
    .chat {
        flex: 2;
    }

    .list {
        flex: 1;
        display: flex;
        flex-direction: column;
    }

    .detail {
        flex: 1;
    }
</style>


<div class="list">
    <partial name="components/_UserInfo" />
    <partial name="components/_ChatList" />
</div>
<partial name="components/_Chat" model="@Model"/>
<partial name="components/_Details" model="@Model.ToUser"/>





<script>

    var currUserId = $("#currUserId").val();
    var connection = new signalR.HubConnectionBuilder().withUrl("/chatHub").build();

    connection.on("ReceiveMessage", function (fromId, toId, message) {
        var fromId = fromId
        var toId = toId
        
        var encodedMsg = $("<div />").text(message).html();
        var messagebox = createMessage(encodedMsg, fromId)
        $("#chatBox").append(messagebox)

        ajaxCallForData()

    });

    $("#sendButton").click(function () {
        var toUserId = $("#toId").val();
        var fromUserId = $("#fromId").val();
        var message = $("#message").val();
        connection.invoke("SendMessage", fromUserId, toUserId, message);
        $("#message").val("").focus();
    });

    connection.start().then(function () {
        console.log("Connected!");
    }).catch(function (err) {
        console.error(err.toString());
    });

    const createMessage = (encodedMsg, fromId) => {
        // Create the div element
        const messageDiv = document.createElement('div');
        messageDiv.classList.add('message');
        if(fromId === currUserId)
        {
            messageDiv.classList.add('own');
        }


        // Create the img element
        const img = document.createElement('img');
        img.src = '/images/avatar.png';
        img.alt = '';

        // Create the div for texts
        const textsDiv = document.createElement('div');
        textsDiv.classList.add('texts');

        // Create the p element for the message
        const p = document.createElement('p');
        p.textContent = encodedMsg;

        // Create the span element for the timestamp
        const span = document.createElement('span');
        span.textContent = '1 min ago';

        // Append elements to their parent
        textsDiv.appendChild(p);
        textsDiv.appendChild(span);

        messageDiv.appendChild(img);
        messageDiv.appendChild(textsDiv);
        return messageDiv
    }
</script>