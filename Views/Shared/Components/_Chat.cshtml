
@using RealTimeChatApp.ViewModels
@model IndexViewModel
@using Microsoft.AspNetCore.Identity
@inject UserManager<IdentityUser> UserManager

@{
    var currUserId = UserManager.GetUserId(User);
    var receiverName = Model.ToUser!.UserName;
    var receiverId = Model.ToUser!.Id;
}

<style>
    .chat {
        flex: 2;
        border-left: 1px solid #dddddd35;
        border-right: 1px solid #dddddd35;
        height: 100%;
        display: flex;
        flex-direction: column;

        .top {
            padding: 20px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            border-bottom: 1px solid #dddddd35;

            .user {
                display: flex;
                align-items: center;
                gap: 20px;

                img {
                    width: 60px;
                    height: 60px;
                    border-radius: 50%;
                    object-fit: cover;
                }

                .texts {
                    display: flex;
                    flex-direction: column;
                    gap: 5px;

                    span {
                        font: 18px;
                        font-weight: bold;
                    }

                    p {
                        font-size: 14px;
                        font-weight: 300;
                        color: #a5a5a5;
                    }
                }
            }

            .icons {
                display: flex;
                gap: 20px;

                img {
                    width: 20px;
                    height: 20px;
                }
            }
        }

        .center {
            padding: 20px;
            flex: 1;
            overflow: auto;
            /* TODO: fix this one ðŸ‘‡ */
            /* overflow-x: hidden; */
            display: flex;
            flex-direction: column;
            gap: 20px;

            .message {
                max-width: 70%;
                display: flex;
                gap: 20px;

                &.own {
                    align-self: flex-end;

                    .texts {
                        p {
                            background-color: #5183fe;
                        }
                    }
                }

                img {
                    width: 30px;
                    height: 30px;
                    border-radius: 50%;
                    object-fit: cover;
                }

                .texts {
                    flex: 1;
                    display: flex;
                    flex-direction: column;
                    gap: 5px;

                    .img {
                        width: 100%;
                        height: 300px;
                        border-radius: 10px;
                        object-fit: cover;
                    }

                    p {
                        padding: 20px;
                        background-color: rgba(17, 25, 40, 0.3);
                        border-radius: 10px;
                    }

                    span {
                        font-size: 13px;
                    }
                }
            }
        }

        .bottom {
            padding: 20px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            border-top: 1px solid #dddddd35;
            gap: 20px;
            margin-top: auto;

            .icons {
                display: flex;
                gap: 20px;
            }

            img {
                width: 20px;
                height: 20px;
                cursor: pointer;
            }

            input {
                flex: 1;
                background-color: rgba(17, 25, 40, 0.5);
                border: none;
                outline: none;
                color: white;
                padding: 20px;
                border-radius: 10px;
                font-size: 16px;
            }

            .emoji {
                position: relative;

                .picker {
                    position: absolute;
                    bottom: 50px;
                    left: 0;
                }
            }

            .sendButton {
                background-color: #5183fe;
                color: white;
                padding: 10px 20px;
                border: none;
                border-radius: 5px;
                cursor: pointer;
            }
        }
    }
</style>


<div class='chat'>
    <div class='top'>
        <div class='user'>
            <img src='~/images/avatar.png' alt='' />
            <div class='texts'>
                <span>@receiverName</span>
                <p>lorm ipsum dolar</p>
            </div>
        </div>
        <div class='icons'>
            <img src='~/images/phone.png' alt='' />
            <img src='~/images/video.png' alt='' />
            <img src='~/images/info.png' alt='' />
        </div>
    </div>

    <div class='center'  id="chatBox">

        @foreach(var message in Model.Messages)
        {
            <div class='message @(message.FromUserId == currUserId ? "own" : " " )'>
                <img src='~/images/avatar.png' alt='' />
                <div class='texts'>
                    <p>
                        @message.Content
                    </p>
                    <span>1 min ago</span>
                </div>
            </div>
        }

    </div>

    <div class='bottom'>
        <div class='icons'>
            <img src='~/images/img.png' alt='' />
            <img src='~/images/camera.png' alt='' />
            <img src='~/images/mic.png' alt='' />
        </div>
            <input type='text' id="message" placeholder='Type a message ...' />
            <input type="hidden" id="currUserId" value="@(currUserId)" />
            <input type="hidden" id="fromId" value="@(currUserId)" />
            <input type="hidden" id="toId" value="@(receiverId)" />
        <div class='emoji'>
            <img src='~/images/emoji.png' alt='' />
        </div>
        <button class='sendButton' id="sendButton">Send</button>
    </div>
</div>

